@page "/rProveedores"
@page "/rProveedores/{ProveedorId:int}"
@inject IToastService toastService

<EditForm Model="Proveedor" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card col-xl-8 center">
			<div class="card-body">

				<h3 class="text-center">Registro de Proveedores</h3>

				<!--Proveedor Id-->
				<div class="form-group" style="padding-left: 0px">
					<label for="ProveedorId" >Codigo del Proveedor</label>
					<div class="input-group">
						<InputNumber @bind-Value="@Proveedor.ProveedorId" class="form-control" />
						<div class="input-group-append">
							<button type="button" class="btn btn-outline-dark" @onclick="Buscar">Buscar</button>
						</div>
					</div>
				</div>

				<!--Nombre del proveedor-->
				<div class="form-group">
					<label for="Nombre">Nombre</label>
					<div>
						<InputText @bind-Value="@Proveedor.Nombre" class="form-control" />
						<ValidationMessage For="@(() => Proveedor.Nombre)" />
					</div>
				</div>

				<!--Direccion del proveedor-->
				<div class="form-group">
					<label for="Direcion">Dirección</label>
					<div>
						<InputText @bind-Value="@Proveedor.Direccion" class="form-control" />
						<ValidationMessage For="@(() => Proveedor.Direccion)" />
					</div>
				</div>

				<!--Teléfono del proveedor-->
				<div class="form-group">
					<label for="Telefono">Teléfono</label>
					<div>
						<InputText @bind-Value="@Proveedor.Direccion" class="form-control" />
						<ValidationMessage For="@(() => Proveedor.Direccion)" />
					</div>
				</div>

				<h4>@mensaje</h4>

				<!--Botones-->
				<div class="container text-center">
					<button type="button" class="btn btn-outline-primary" style="margin:10px" @onclick="Limpiar">Limpiar</button>
					<button type="submit" class="btn btn-outline-success" style="margin:10px" @onclick="Guardar">Guardar</button>
					<button type="button" class="btn btn-outline-danger"  style="margin:10px" data-toggle="modal" data-target="#exampleModal">Eliminar</button>

					<!-- Modal -->
					<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
						<div class="modal-dialog" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title">Atencion</h5>
									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
								</div>
								<div class="modal-body">
									¿Desea eliminar este Proveedor?
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-outline-secondary" data-dismiss="modal">No</button>
									<button type="button" data-dismiss="modal" class="btn btn-outline-danger" @onclick="Eliminar">Si</button>
								</div>
							</div>
						</div>
					</div>
					<!--fin de modal-->
				</div>

			</div>
		</div>
	</div>

</EditForm>

@code {
	[Parameter]
	public int ProveedorId { get; set; }

	Proveedores Proveedor = new Proveedores();
	ProveedoresController proveedoresController = new ProveedoresController();
	string mensaje = string.Empty;

	protected override void OnInitialized()
	{
		Proveedor = new Proveedores();

		if (ProveedorId != 0)
		{
			Proveedor.ProveedorId = ProveedorId;
			Buscar();
		}
	}

	public void Guardar()
	{
		if (proveedoresController.Guardar(Proveedor))
		{
			Limpiar();
			mensaje = "Proveedor guardado de manera exitosa!";
			toastService.ShowSuccess("Proveedor Guardado", "Exito");
		}
		else
		{
			mensaje = "No fue posible guardar este proveedor!";
		}
	}

	public void Buscar()
	{
		Proveedores ProveedorTemporal = proveedoresController.Buscar(Proveedor.ProveedorId);

		if (ProveedorTemporal != null)
		{
			Proveedor = ProveedorTemporal;
			mensaje = "Proveedor encontrado de manera exitosa!";
		}
		else
		{
			Limpiar();
			mensaje = "No existe un proveedor con este código!";
		}
	}

	public void Eliminar()
	{
		Proveedores ProveedorTemporal = proveedoresController.Buscar(Proveedor.ProveedorId);

		if (ProveedorTemporal != null)
		{
			proveedoresController.Eliminar(Proveedor.ProveedorId);
			Limpiar();
			mensaje = "Proveedor eliminado de manera exitosa!";
		}
		else
		{
			Limpiar();
			mensaje = "No fue posible eliminar este proveedor!";
		}
	}

	public void Limpiar()
	{
		this.Proveedor = new Proveedores();
		mensaje = string.Empty;
	}
}
