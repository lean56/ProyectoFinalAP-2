@page "/rProveedores"
@page "/rProveedores/{ProveedorId:int}"
@inject IToastService toastService

<EditForm Model="Proveedor" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <center>
        <h1>Registro de Proveedores</h1>
    </center>

    <form>
        <div class="form-row">

            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-1" />

            <!-- Proveedor ID -->
            <div class="form-group col-sm-5     col-md-5     col-lg-3     col-xl-3     ">
                <label for="ProveedorId" class="col-auto">Código</label>
                <div class="input-group ">
                    <InputNumber @bind-Value="@Proveedor.ProveedorId" class="form-control" />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass" />&nbsp;&nbsp;Buscar</button>
                    </div>
                </div>
            </div>

            <!--Division del codigo del proveedor y la fecha-->
            <div class="col-sm-3     col-md-3     col-lg-4     col-xl-4" />

            <!-- Fecha -->
            <div class="form-group col-sm-4     col-md-4     col-lg-3     col-xl-3     ">
                <label for="Fecha">Fecha</label>
                <InputDate @bind-Value="@Proveedor.Fecha" class="form-control" disabled />
            </div>

            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-1" />

            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-1" />

            <!-- Nombre -->
            <div class="form-group container col-sm-6 col-md-6   col-lg-5">
                <label for="Nombre">Nombre</label>
                <InputText @bind-Value="@Proveedor.Nombre" class="form-control" placeholder="Nombre" />
                <ValidationMessage For="@(()=>Proveedor.Nombre)" />
                <p class="validation-message"> @MensajeNombre </p>
            </div>

            <!-- Telefono -->
            <div class="form-group container col-sm-6 col-md-6   col-lg-5">
                <label for="Telefono">Teléfono</label>
                <InputText @bind-Value="@Proveedor.Telefono" class="form-control" placeholder="8098098098 (Sin Guiones)" />
                <ValidationMessage For="@(()=>Proveedor.Telefono)" />
            </div>

            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-1" />

            <div class="col-sm-0     col-md-0     col-lg-1     col-xl-1" />

            <!-- Dirección -->
            <div class="form-group col-md-12     col-lg-10     col-xl-10">
                <label for="Dirrecion">Dirección</label>
                <InputText @bind-Value="@Proveedor.Direccion" class="form-control" placeholder="Ciudad, Sector, Calle, Numero " />
                <ValidationMessage For="@(()=>Proveedor.Direccion)" />
            </div>

        </div>
    </form>

    @*<ValidationSummary />*@
    <!-- Botones-->
    <div class="text-center">
        <button type="button" class="btn btn-warning BotonRegistro" @onclick="Limpiar"><span class="oi oi-file" />&nbsp;Limpiar</button>
        <button type="submit" class="btn btn-success BotonRegistro"><span class="oi oi-data-transfer-download"></span>&nbsp;Guardar</button>
        <button type="button" class="btn btn-danger BotonRegistro" data-toggle="modal" data-target="#exampleModal"><span class="oi oi-trash" />&nbsp;Eliminar</button>


        <!-- Modal-->
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmacion</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        ¿Está seguro de que desea eliminar este Proveedor?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">¡No lo estoy!</button>
                        <button type="button" data-dismiss="modal" class="btn btn-outline-danger" @onclick="Eliminar">¡Si lo estoy!</button>
                    </div>
                </div>
            </div>
        </div>
        <!--fin de modal-->
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProveedorId { get; set; }

    ProveedoresController proveedoresController = new ProveedoresController();
    private Proveedores Proveedor { get; set; }

    private string MensajeNombre = string.Empty;

    protected override void OnInitialized()
    {
        Proveedor = new Proveedores();
        Limpiar();

        if (ProveedorId != 0)
        {
            Proveedor.ProveedorId = ProveedorId;
            Buscar();
        }
    }

    public void Guardar()
    {

        LimpiarMensajes();

        if (ExisteNombre())
        {
            MensajeNombre = "Existe un proveedor con este nombre, debe elegir otro.";
            return;
        }

        if (proveedoresController.Guardar(Proveedor))
        {
            Limpiar();
            toastService.ShowSuccess("Proveedor guardado correctamente", "Exito");

        }
        else
        {
            toastService.ShowError("Error al guardar el proveedor", "Fallo");

        }
    }

    public void Buscar()
    {
        Proveedores ProveedorTemporal = proveedoresController.Buscar(Proveedor.ProveedorId);

        if (ProveedorTemporal != null)
        {
            Limpiar();
            Proveedor = ProveedorTemporal;
            toastService.ShowSuccess("Proveedor encontrado.", "Exito");

        }
        else
        {
            Limpiar();
            toastService.ShowError("El proveedor no fue encontrado.", "Fallo");

        }
    }

    public void Eliminar()
    {
        Proveedores ProveedorTemporal = proveedoresController.Buscar(Proveedor.ProveedorId);

        if (ProveedorTemporal!= null)
        {
            if (proveedoresController.Eliminar(Proveedor.ProveedorId))
            {
                Limpiar();
                toastService.ShowSuccess("Proveedor eliminado correctamente.", "Exito");
            }
            else
            {
                toastService.ShowError("Error al eliminar el Proveedor.", "Fallo");
            }
        }
        else
        {
            toastService.ShowError("Error al eliminar el Proveedor.", "Fallo");
        }
    }



    public bool ExisteNombre() //Valida si el nombre dl proveedor existe y lo tiene otro proveedor 
    {
        bool paso = false;
        var Listado = new List<Proveedores>();

        Listado = proveedoresController.GetList(p => p.Nombre == Proveedor.Nombre);

        if (Listado.Count == 1)
        {
            if(Proveedor.ProveedorId == 0)
				return paso = true;

            Proveedores ProveedorTemporal = new Proveedores();
            ProveedorTemporal = Listado[0];
            if (ProveedorTemporal.ProveedorId != Proveedor.ProveedorId)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

    public void Limpiar()
    {
        this.Proveedor = new Proveedores();
        LimpiarMensajes();
    }

    public void LimpiarMensajes()
    {
        MensajeNombre = string.Empty;
    }
   
}
