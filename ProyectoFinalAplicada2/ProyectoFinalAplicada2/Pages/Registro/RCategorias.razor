@page "/rCategorias"
@page "/rCategorias/{CategoriaId:int}"
@inject IToastService toastService
<EditForm Model="Categoria" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />

        <div class="container center">

            <center>
                <h1>Registro de Categorias</h1>
            </center>

            <form>
                <div class="form-row justify-content-center">

                    <div class="form-group">
                        <label for="Categoriaid">Codigo de Categoria</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="@Categoria.CategoriaId" class="form-control" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                            </div>
                        </div>

                        <label for="nombre">Nombre</label>
                        <InputText @bind-Value="@Categoria.Nombre" class="form-control" placeholder="Nombre" />
                        <ValidationMessage For="@(()=>Categoria.Nombre)" />
                        <p class="validation-message"> @MensajeNombre </p>
                    </div>

                </div>
            </form>
            <div class="text-center">
                <button type="button" class="btn btn-warning " @onclick="Limpiar" style="color: white"><span class="oi oi-file" />Limpiar</button>
                <button type="submit" class="btn btn-success "><span class="oi oi-data-transfer-download"></span>Guardar</button>
                <button type="button" class="btn btn-danger " data-toggle="modal" data-target="#exampleModalCenter"><span class="oi oi-trash" />Eliminar</button>


                <!-- Modal-->
                <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title"  id="exampleModalCenterTitle">Confirmacion</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                ¿Está seguro de que desea eliminar esta Categoria?
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">¡No lo estoy!</button>
                                <button type="button" data-dismiss="modal" class="btn btn-outline-danger" @onclick="Eliminar">¡Si lo estoy!</button>
                            </div>
                        </div>
                    </div>
                </div>
                <!--fin de modal-->
            </div>


        </div>
    </EditForm>


    @code {
        [Parameter]
        public int CategoriaId { get; set; }

        CategoriasController categoriasController = new CategoriasController();
        Categorias Categoria = new Categorias();

        string MensajeNombre;

        protected override void OnInitialized()
        {
            Categoria = new Categorias();
            Limpiar();
            if (CategoriaId != 0)
            {
                Categoria.CategoriaId = CategoriaId;
                Buscar();
            }
        }


        public void Guardar()
        {

            LimpiarMensajes();

            if (ExisteNombre())
            {
                MensajeNombre = "Existe una categoria con este nombre, debe ingresar otro.";
                return;
            }

            if (categoriasController.Guardar(Categoria))
            {
                Limpiar();
                toastService.ShowSuccess("Categoría guardada correctamente", "Exito");

            }
            else
            {
                toastService.ShowError("Error al guardar Categoría.", "Fallo");

            }
        }

        public void Buscar()
        {
            Categorias CategoriaTemporal = categoriasController.Buscar(Categoria.CategoriaId);

            if (CategoriaTemporal != null)
            {
                Limpiar();
                Categoria = CategoriaTemporal;
                toastService.ShowSuccess("Categoría encontrado.", "Exito");

            }
            else
            {
                Limpiar();
                toastService.ShowError("La Categoría no fue encontrado.", "Fallo");

            }
        }

        public void Eliminar()
        {
            Categorias CategoriaTemporal = categoriasController.Buscar(Categoria.CategoriaId);

            if (CategoriaTemporal != null)
            {
                if (categoriasController.Eliminar(Categoria.CategoriaId))
                {
                    Limpiar();
                    toastService.ShowSuccess("Categoría eliminado correctamente.", "Exito");
                }
                else
                {
                    toastService.ShowError("Error al eliminar la Categoría.", "Fallo");
                }
            }
            else
            {
                toastService.ShowError("Error al eliminar la Categoría.", "Fallo");
            }
        }

        public bool ExisteNombre() //Valida si el nombre existe y lo tiene otra categoria
        {
            bool paso = false;
            var Listado = new List<Categorias>();

            Listado = categoriasController.GetList(p => p.Nombre == Categoria.Nombre);

            if (Listado.Count == 1)
            {
                if(Categoria.CategoriaId == 0)
                    return paso = true;

                Categorias CategoriaTemporal = new Categorias();
                CategoriaTemporal = Listado[0];
                if (CategoriaTemporal.CategoriaId != CategoriaTemporal.CategoriaId)
                {
                    paso = true;
                }
            }
            else if (Listado.Count > 1)
            {
                paso = true;
            }

            return paso;
        }

        public void Limpiar()
        {
            this.Categoria = new Categorias();
            LimpiarMensajes();
        }

        public void LimpiarMensajes()
        {
            MensajeNombre = string.Empty;
        }
    }
