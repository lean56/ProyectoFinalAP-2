@page "/rFacturas"
@page "/rFacturas/{FacturaId:int}"

@inject IToastService toastService

<EditForm Model="Factura" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<center>
		<h1> Registro de Factura </h1>
	</center>

	<form>
		<div class="form-row">
			<!--Factura Id-->
			<div class="form-group col-sm-5     col-md-5     col-lg-3     col-xl-3     ">
				<label for="FacturaId " class="col-auto">Factura Id</label>
				<div class="input-group ">
					<InputNumber @bind-Value="@Factura.FacturaId" class="form-control" />
					<div class="input-group-append">
						<button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass" />&nbsp;&nbsp;Buscar</button>
					</div>
				</div>
			</div>

			<div class="col-sm-4   col-md-4   col-lg-5  col-xl-5" />

			<!-- Fecha -->
			<div class="form-group">
				<label for="FechaIngreso" class="col-auto">Fecha</label>
				<InputDate @bind-Value="@Factura.Fecha" class="form-control" disabled />
			</div>

			<!--Cliente-->
			<div class="form-group col-sm-6     col-md-6     col-lg-6col-xl-6">
				<label class="col-auto" for="cliente">Cliente</label>

				<div class="form-group row">
					<div class="col-md-6 no-padding">
						<InputSelect @bind-Value="@ClienteSelect" class="form-control " @onchange="CargarCliente" @onclick="CargarCliente">
							<option value="" disabled selected>Seleccione un Cliente</option>
							@foreach (var item in ListaCliente)
							{
								<option value="@item.ClienteId">@item.Nombres</option>
							}
						</InputSelect>
					</div>
				</div>
			</div>
			<div class="form-group row">
				<div class="col-md-3 no-padding">
					<label for="producto" class="col-auto">Producto</label>

					<!--Producto-->
					<InputSelect @bind-Value="@ProductoSelect" class="form-control" @onchange="CargarProducto" @onclick="CargarProducto">

						@if (ListaProducto.Count == 0)
						{
							<option value="">No hay Producto Registrado</option>
						}
						else
						{
							<option value="" disabled selected>Seleccione un Producto</option>

							@foreach (var item in ListaProducto)
							{
								<option value="@item.ProductoId">@item.Descripcion</option>
							}
						}
					</InputSelect>
				</div>
				<!--Cantidad-->
				<div class="col-2">
					<label class="col-auto" for="Cantidad">Cantidad</label>
					<InputNumber @bind-Value="@Cantidad" class="form-control" @onfocusin="CalcularImporte" @onfocusout="CalcularImporte" @onclick="CalcularImporte" />
				</div>
				<!--Precio-->
				<div class="form-group col-sm-2">
					<label class="col-auto" for="precio">Precio</label>
					<InputNumber @bind-Value="@Precio" class="form-control" disabled></InputNumber>
				</div>
				<!--Importe-->
				<div class="form-group col-sm-3">
					<label class="col-auto" for="importe">Importe</label>
					<div class="input-group ">

						<InputNumber @bind-Value="@Importe" class="form-control " disabled @onfocusin="CalcularImporte" @onfocusout="CalcularImporte" @onclick="CalcularImporte" />
						<div class="input-group-append">
							<button type="button" class="btn btn-outline-primary" @onclick="AgregarProducto">Agregar</button>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-10 no-padding">

				<div class="card">
					<div class="card-body">
						<table class="table">
							<thead class="thead-dark">
								<tr>
									<th>Id</th>
									<th>ProductoId</th>
									<th>Descripcion</th>
									<th>Cantidad</th>
									<th>Precio</th>
									<th></th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Factura.Detalle)
								{
									<tr>
										<th>@item.FacturaId</th>
										<th>@item.ProductoId</th>
										<th>@item.Descripcion</th>
										<th>@item.Cantidad</th>
										<th>@item.Precio</th>
										<th><button type="button" class="btn btn-outline-danger btn-sm" @onclick="(()=> EliminarProducto(item))">Eliminar</button></th>
									</tr>
								}
							</tbody>
						</table>
						<div class="form-row justify-content-end">

							<div class="col-2 ">
								<label>Total: </label>
								<label>@Factura.Total</label>
							</div>
						</div>
					</div>
				</div>
				<br />

			</div>
		</div>
	</form>

	<div class="text-center">
		<button type="button" class="btn btn-warning BotonRegistro" @onclick="Limpiar"><span class="oi oi-file" />&nbsp;Limpiar</button>
		<button type="submit" class="btn btn-success BotonRegistro"><span class="oi oi-data-transfer-download"></span>&nbsp;Guardar</button>
		<button type="button" class="btn btn-danger BotonRegistro" data-toggle="modal" data-target="#exampleModal"><span class="oi oi-trash" />&nbsp;Eliminar</button>


		<!-- Modal-->
		<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Confirmacion</h5>
						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
							<span aria-hidden="true">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						¿Está seguro de que desea eliminar esta Factura?
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-outline-secondary" data-dismiss="modal">¡No lo estoy!</button>
						<button type="button" data-dismiss="modal" class="btn btn-outline-danger" @onclick="Eliminar">¡Si lo estoy!</button>
					</div>
				</div>
			</div>
		</div>
		<!--fin de modal-->
	</div>

	<br />


</EditForm>
@code {


	[Parameter]
	public int FacturaId { get; set; }

	public Facturas Factura { get; set; }

	ClientesController clientesController = new ClientesController();
	ProductosController productosController = new ProductosController();
	FacturaController controller = new FacturaController();
	private string ProductoSelect { get; set; }
	private string ClienteSelect { get; set; }

	private string mensaje = "";

	private int Cantidad = 0;
	private decimal Precio = 0;
	private int Importe = 0;

	private List<Productos> ListaProducto = new List<Productos>();
	private List<Clientes> ListaCliente = new List<Clientes>();

	private Clientes Cliente { get; set; }
	private Productos Producto { get; set; }

	protected override void OnInitialized()
	{
		ListaCliente = clientesController.GetList(e => true);
		ListaProducto = productosController.GetList(e => true);
		Factura = new Facturas();
		Cliente = new Clientes();
		Producto = new Productos();

		if (FacturaId != 0)
		{
			Factura.FacturaId = FacturaId;
			Buscar();
		}
	}

	private void CargarProducto()
	{
		try
		{
			Producto = productosController.Buscar(Convert.ToInt32(ProductoSelect));
			Precio = Producto.Precio;
		}
		catch (Exception ex)
		{
			//	mensaje = ex.ToString();
		}
	}

	private void CargarCliente()
	{
		try
		{
			Cliente = clientesController.Buscar(Convert.ToInt32(ClienteSelect));
		}
		catch (Exception ex)
		{
			//mensaje = ex.ToString();
		}
	}

	private void AgregarProducto()
	{
		if (ProductoSelect == null)
		{
			toastService.ShowInfo("Debe seleccionar un Producto", "Info");
		}
		else
		{
			if (Precio <= 0)
			{
				toastService.ShowInfo("El precio es Obligatorio", "Info");
			}
			else
			{
				if (Cantidad <= 0)
				{
					toastService.ShowInfo("Debes indicar la cantidad", "Info");
				}
				else
				{
					if (Cantidad > Producto.Cantidad)
					{
						toastService.ShowInfo("Solo quedan " + Producto.Cantidad + " de este producto", "Info");
					}
					else
					{
						if (Factura.Detalle.Any(i => i.ProductoId == Producto.ProductoId))
						{
							toastService.ShowInfo("Este Producto ya esta agregado", "Info");
						}
						else
						{
							mensaje = "";
							Factura.Detalle.Add(new FacturaDetalles()
							{
								FacturaId = Factura.FacturaId,
								ProductoId = Producto.ProductoId,
								Descripcion = Producto.Descripcion,
								Cantidad = Cantidad,
								Precio = Precio,
								Importe = (Cantidad * Precio)
							});
							Producto = new Productos();

							decimal total = 0;

							foreach (var item in Factura.Detalle)
							{
								total += item.Importe;
							}

							Factura.Total = total;
						}
					}
				}
			}
		}
	}

	private void EliminarProducto(FacturaDetalles detalle)
	{
		Factura.Detalle.Remove(detalle);
	}

	public void Guardar()
	{
		mensaje = "";
		CalcularImporte();
		if (ClienteSelect == null)
		{
			toastService.ShowInfo("debe seleccionar un Cliente", "Info");
		}
		else
		{
			Factura.ClienteId = Convert.ToInt32(ClienteSelect);
			if (Factura.Detalle.Count == 0)
			{
				toastService.ShowInfo("Debes agregar un producto al detalle", "Info");
			}
			else
			{
				if (controller.Guardar(Factura))
				{
					Limpiar();
					toastService.ShowSuccess("Factura Guardada", "Exito");
				}
				else
				{
					toastService.ShowError("Error al guardar Factura", "Fallo");
				}
			}
		}
	}

	public void Buscar()
	{
		var factura = controller.Buscar(Factura.FacturaId);

		if (factura != null)
		{
			Limpiar();
			Factura = factura;
			ClienteSelect = Convert.ToString(Factura.ClienteId);
		}
		else
		{
			Factura = new Facturas();
			toastService.ShowError("Factura no existe", "Fallo");
		}
	}

	public void Eliminar()
	{
		var factura = controller.Buscar(Factura.FacturaId);

		if (Factura != null)
		{
			controller.Eliminar(Factura.FacturaId);
			Limpiar();
			toastService.ShowSuccess("Factura eliminada correctamente.", "Exito");
		}
		else
		{
			toastService.ShowError("Error al eliminar esta Factura.", "Fallo");
		}
	}

	public void Limpiar()
	{
		mensaje = "";
		this.Factura = new Facturas();
		ClienteSelect = "";
		ProductoSelect = "";
		Precio = 0;
		Cantidad = 0;
		Importe = 0;
	}

	public void CalcularImporte()
	{
		if (Factura != null)
		{
			Importe = Convert.ToInt32(Precio) * Cantidad;
		}
		else
		{
			toastService.ShowError("Error al Calcular.", "Fallo");
		}
	}
}